{
	"info": {
		"_postman_id": "532c2ea4-b106-47ab-8122-3262e2ad80c1",
		"name": "Kadi-Kristel.Kööp_jira_clone_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35031582"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post comment",
			"item": [
				{
					"name": "Create new issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.eql(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.eql(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"\r",
									"pm.globals.set(\"issue_id_comment\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    \r",
									"    //Add validation, that reporterId is equal to the currently logged in user (user variable current_user_id)\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"    \r",
									"    //Add validation, that projectId is equal to the current project (user variable project_id)\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id1\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"inprogress\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add comment to the created issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomComment = pm.globals.get(\"randomComment\")\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.set(\"comment1_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(randomComment);\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another comment to the created issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomComment = pm.globals.get(\"randomComment\")\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.set(\"comment2_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(randomComment);\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all comments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_comment}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_comment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - no parameters (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Mandatory fields: body, issueId, userId. [https://cerebrumhubstudents.atlassian.net/wiki/spaces/P6KBQ/pages/251494681/POST+Comment]\r",
									"// Test result: Only body is mandatory field\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.body).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - with special symbols in the text field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.set(\"comment_special_symbols_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is ¤my¤ comment to check %special/ symbols in text &\");\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is ¤my¤ comment to check %special/ symbols in text &\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - with Cyrillic letters in the text field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.set(\"comment_cyrillic_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"май экзампл ин кириллик\");\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"май экзампл ин кириллик\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"my comment\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - userId value null (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Mandatory fields: body, issueId, userId. [https://cerebrumhubstudents.atlassian.net/wiki/spaces/P6KBQ/pages/251494681/POST+Comment]\r",
									"// Test result: Only body is mandatory field\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for missing userId\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.userId).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - valid userId with type String (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for userId type String\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.userId).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": \"955349\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - issueId value null (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Mandatory fields: body, issueId, userId. [https://cerebrumhubstudents.atlassian.net/wiki/spaces/P6KBQ/pages/251494681/POST+Comment]\r",
									"// Test result: Only body is mandatory field\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for missing issueId\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.issueId).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": null,\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - non-existent issueId (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 404 for non-existent issueId\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\");\r",
									"    pm.expect(jsonData.error.data.fields.issueId).to.eql(\"IssueId not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": 999999999,\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - body value null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for missing body\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.body).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": null,\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - invalid userId (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 404 for invalid userId\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\");\r",
									"    pm.expect(jsonData.error.data.fields.userId).to.eql(\"UserId not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": 123456\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Put comment",
			"item": [
				{
					"name": "Create comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomComment = pm.globals.get(\"randomComment\")\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.set(\"upd_comment_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(randomComment);\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomComment = pm.globals.get(\"randomComment\")\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.get(\"upd_comment_id\");\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating comment\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(randomComment);\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{upd_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{upd_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment - no parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Retrieving lastly created data\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.get(\"upd_comment_id\");\r",
									"\r",
									"pm.test(\"Response should be 200 for updating comment successfully\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{upd_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{upd_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment - body value null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for missing body\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.body).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": null,\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{upd_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{upd_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment - issueId value null (bug)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for missing issueId\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.issueId).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": null,\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{upd_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{upd_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment - userId value null (bug)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for missing issueId\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.issueId).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{upd_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{upd_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment - no auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{upd_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{upd_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update deleted comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"del_comment_id\");\r",
									"\r",
									"pm.test(\"Response should be 404 for deleted comment\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{del_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{del_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created comment - no auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"del_comment_id\");\r",
									"\r",
									"pm.test(\"Response should be 404 for deleted comment\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{del_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{del_comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comment",
			"item": [
				{
					"name": "Create comment to delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomComment = pm.globals.get(\"randomComment\")\r",
									"var issueIdComment = pm.globals.get(\"issue_id_comment\");\r",
									"var currentUserId = pm.globals.get(\"current_user_id\");\r",
									"\r",
									"pm.globals.get(\"issue_id_comment\");\r",
									"pm.globals.set(\"del_comment_id\", jsonData.comment.id);\r",
									"\r",
									"pm.test(\"Comment creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify comment\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(randomComment);\r",
									"    pm.expect(jsonData.comment.issueId).to.eql(issueIdComment);\r",
									"    pm.expect(jsonData.comment.userId).to.eql(currentUserId);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"del_comment_id\");\r",
									"\r",
									"pm.test(\"Issue deletion was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/{{del_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{del_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment - no auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{del_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{del_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all comments (bug)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomComment = pm.variables.replaceIn(\"{{$randomPhrase}}\")\r",
									"\r",
									"pm.globals.set(\"randomComment\", randomComment)\r",
									"\r",
									"pm.test(\"Environment variable was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"randomComment\")).to.eql(randomComment);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// It seems that it works only when deleting issue. \r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_comment\");\r",
									"\r",
									"pm.test(\"Issue deletion was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{randomComment}}\",\r\n    \"issueId\": {{issue_id_comment}},\r\n    \"userId\": {{current_user_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_comment}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_comment}}",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		}
	]
}