{
	"info": {
		"_postman_id": "12e02b63-6db1-4696-a421-ee17a2aea069",
		"name": "Kadi-Kristel.Kööp_jira_clone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35031582"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Post issue",
			"item": [
				{
					"name": "Create issue - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"5\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": \"{{project_id}}\",\r\n    \"users\": [\r\n        {\r\n            \"id\": \"{{user_id2}}\"\r\n        },\r\n                {\r\n            \"id\": \"{{user_id3}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - no parameters (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// projectId is mandatory, so it should be in the list\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"All mandatory fields are listed in fields block\", function () {\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields).to.have.keys('title', 'type', 'status', \"projectId\", 'priority', 'reporterId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - title > 200 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for title > 200 symbols\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.title).to.eql(\"Must be at most 200 characters\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"Et sint voluptas similique iure amet perspiciatis vero sequi atque. Ut porro sit et hic. Neque aspernatur vitae fugiat ut dolore et veritatis. Ab iusto ex delectus animi. Voluptates nisi iusto. Impedit quod quae voluptate qui.\",\r\n    \"description\": \"Issue with title over 200 symbols\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with projectId null (bug)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for projectId null\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.projectId).to.eql(\"This field is required\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"Issue with projectId null\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": null,\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        },\r\n        {\r\n            \"id\": {{user_id3}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with non-existent projectId (bug)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 404 for non-existent projectId\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.data.fields.projectId).to.eql(\"ProjectId not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"Issue with non-existent projectId\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"5\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": 9999999,\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        },\r\n        {\r\n            \"id\": {{user_id3}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - title with 200 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Et sint voluptas similique iure amet perspiciatis vero sequi atque. Ut porro sit et hic. Neque aspernatur vitae fugiat ut dolore et veritatis. Ab iusto ex delectus animi. Voluptates nisi iusto. Impedi\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue with title 200 symbols\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"1\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"\r",
									"   // Add validation, that reporterId is equal to the currently logged in user (user variable current_user_id)\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"    \r",
									"    // Add validation, that projectId is equal to the current project (user variable project_id)\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    // Add validation, that users associated with the issue\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id1\"));\r",
									"    pm.expect(jsonData.issue.users[1].id).to.eql(pm.globals.get(\"user_id2\"));\r",
									"\r",
									"    // Check estimate, timeSpent and timeRemaining are null\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"Et sint voluptas similique iure amet perspiciatis vero sequi atque. Ut porro sit et hic. Neque aspernatur vitae fugiat ut dolore et veritatis. Ab iusto ex delectus animi. Voluptates nisi iusto. Impedi\",\r\n    \"description\": \"Issue with title 200 symbols\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"1\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n         {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - title with 200 symbols",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Et sint voluptas similique iure amet perspiciatis vero sequi atque. Ut porro sit et hic. Neque aspernatur vitae fugiat ut dolore et veritatis. Ab iusto ex delectus animi. Voluptates nisi iusto. Impedi\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"url": {
							"raw": "{{base_url}}/issues/2615385",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2615385"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with reporterId null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for reporterId value null\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"This field is required\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"Issue with reporterId null\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": null,\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with non-existent reporterId (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 404 for non-existent reporterId\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"ReporterId not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"Issue with non-existent reporterId\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": 9999999,\r\n    \"priority\": \"1\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with invalid priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid priority value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.priority).to.eql(\"Must be one of: 5, 4, 3, 2, 1\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue with invalid priority\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"8\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with invalid type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid issue type value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.type).to.eql(\"Must be one of: task, bug, story\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"test_type\",\r\n    \"title\": \"Issue with invalid type value\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid issue status value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.status).to.eql(\"Must be one of: backlog, selected, inprogress, done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"Issue with invalid status value\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"test_status\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    \r",
									"    //Add validation, that reporterId is equal to the currently logged in user (user variable current_user_id)\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"    \r",
									"    //Add validation, that projectId is equal to the current project (user variable project_id)\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id2\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"voluptates nulla commodi\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"url": {
							"raw": "{{base_url}}/issues/2615388",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2615388"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - test with specific parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\")\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"user_id2\"));\r",
									"    \r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id1\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{user_id2}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"selected\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - test with specific parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"facilis voluptatem sed\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"url": {
							"raw": "{{base_url}}/issues/2615389",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2615389"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - test with built-in variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\")\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"user_id2\"));\r",
									"    \r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id1\"));\r",
									"    pm.expect(jsonData.issue.users[1].id).to.eql(pm.globals.get(\"user_id3\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentence}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomAdjective}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{user_id2}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"inprogress\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        },\r\n        {\r\n            \"id\": {{user_id3}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - test with built-in variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"cross-platform\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Temporibus adipisci rerum dolor.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"url": {
							"raw": "{{base_url}}/issues/2615390",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2615390"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with invalid users Id (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid user ID\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.users).to.eql(\"Invalid user(s) ID\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": 123456\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with title empty string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for title empty String\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.title).to.eql(\"This field is required\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"4\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with title null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for title with value null\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.title).to.eql(\"This field is required\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": null,\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"1\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - without type, status and priority (null)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for type, status and priority with value null\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.type).to.eql(\"This field is required\")\r",
									"    pm.expect(jsonData.error.data.fields.status).to.eql(\"This field is required\")\r",
									"    pm.expect(jsonData.error.data.fields.priority).to.eql(\"This field is required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": null,\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": null,\r\n    \"status\": null,\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id3}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - with invalid priority, status and type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for type, status and priority with invalid value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.type).to.eql(\"Must be one of: task, bug, story\")\r",
									"    pm.expect(jsonData.error.data.fields.status).to.eql(\"Must be one of: backlog, selected, inprogress, done\")\r",
									"    pm.expect(jsonData.error.data.fields.priority).to.eql(\"Must be one of: 5, 4, 3, 2, 1\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"inv_type\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"inv_priority\",\r\n    \"status\": \"inv_status\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id3}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create issue - only required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTitle = pm.globals.get(\"title\")\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that provided information is correct\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"5\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variable 'title' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"{{title}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"5\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - only required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"maiores quas eveniet\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"url": {
							"raw": "{{base_url}}/issues/2615400",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2615400"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get issue by id",
			"item": [
				{
					"name": "Get issue (non-existing id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/33333333",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"33333333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issue - with uniqueId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Request was succesful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Issue have correct information\", function () {\r",
									"    pm.expect(jsonData.issue).to.have.any.keys('title', 'priority');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/2611800",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2611800"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issue - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/2609077",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"2609077"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get issues (search)",
			"item": [
				{
					"name": "Get all issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All issues have correct information\", function () {\r",
									"    //some issues are found\r",
									"    pm.expect(jsonData.issues.length).to.be.greaterThan(0);\r",
									"\r",
									"    //example, how to check, that issues have correct attributes, when you know only some of them\r",
									"    pm.expect(jsonData.issues[0]).to.include.keys('title', 'priority');\r",
									"});\r",
									"\r",
									"pm.test(\"All issues belong to the same project\", function () {\r",
									"    //go through all found issues\r",
									"    jsonData.issues.forEach(function (issue) {\r",
									"        //check some condition\r",
									"        if (issue.projectId !== pm.globals.get(\"project_id\")) {\r",
									"            //do something\r",
									"            pm.expect.fail(\"Reason why: some issues belong to other projects\");\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all issues - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get empty search - title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Request was succesful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Issues array is empty\", function () {\r",
									"    pm.expect(jsonData.issues).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues?searchTerm=nonexistent_title",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "nonexistent_title"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue by title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"title_searching\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that created issue was found\", function () {\r",
									"    pm.expect(jsonData.issues[0].title).to.eql(pm.globals.get(\"title_searching\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues?searchTerm={{title_searching}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "{{title_searching}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"pm.globals.set(\"title_searching\", jsonData.issue.title);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Zebra Glitch\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"\r",
									"   //Add validation, that reporterId is equal to the currently logged in user (user variable current_user_id)\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"user_id1\"));\r",
									"    \r",
									"    //Add validation, that projectId is equal to the current project (user variable project_id)\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id3\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"Zebra Glitch\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{user_id1}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"selected\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id3}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete issue",
			"item": [
				{
					"name": "Create new issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"\r",
									"pm.globals.set(\"issue_id_delete\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"New issue to delete\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    \r",
									"    //Add validation, that reporterId is equal to the currently logged in user (user variable current_user_id)\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(104);\r",
									"    \r",
									"    //Add validation, that projectId is equal to the current project (user variable project_id)\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(35);\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(104);\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"New issue to delete\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": 104,\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": 35,\r\n    \"users\": [\r\n        {\r\n            \"id\": 104\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_delete\");\r",
									"\r",
									"pm.test(\"Issue deletion was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_delete}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_delete\")\r",
									"\r",
									"pm.test(\"Issue deletion with already deleted id, error code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Issue not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_delete}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete issue - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the same issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_delete\");\r",
									"\r",
									"pm.test(\"Issue deletion with already deleted id, error code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Issue not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_delete}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete issue with non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Issue deletion with non-existent id, error code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Issue not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/99999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"99999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Put issue",
			"item": [
				{
					"name": "Create issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"\r",
									"//save certain value from JSON to globals  variable\r",
									"pm.globals.set(\"issue_id_change\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(104);\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(35);\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(104);\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": 104,\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": 35,\r\n    \"users\": [\r\n        {\r\n            \"id\": 104\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue priority",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); \r",
									"var issueId = pm.globals.get(\"issue_id_change\");\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating priority\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that priority was updated correctly\", function () {\r",
									"    pm.expect(jsonData.issue.id).to.eql(issueId);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"priority\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_change\");\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating type\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type was updated correctly\", function () {\r",
									"    pm.expect(jsonData.issue.id).to.eql(issueId);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue title > 200 symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for title > 200 symbols\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\");\r",
									"    pm.expect(jsonData.error.data.fields.title).to.eql(\"Must be at most 200 characters\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Ab aliquid odio iste quo voluptas voluptatem dignissimos velit. Recusandae facilis qui commodi ea magnam enim nostrum quia quis. Nihil est suscipit assumenda ut voluptatem sed. Esse ab voluptas odit qui molestiae.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change reporterId (non-existent) (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 404 for non-existent reporterId\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"ReporterId not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reporterId\": 9999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change reporterId - valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_change\");\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating reporterId\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that type was updated correctly\", function () {\r",
									"    pm.expect(jsonData.issue.id).to.eql(issueId);\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(953891);\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reporterId\": 953891\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change reporterId with maximum Integer number (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for maximum Integer number\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_REQUEST\")\r",
									"    pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"ReporterId does not exist in the system.\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reporterId\": 2147483647\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change reporterId with over maximum Integer number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 500 for reporterId exceeding maximum Integer value\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"    //pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"ReporterId exceeds the maximum allowed integer value\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reporterId\": 2147483649\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change projectId (non-existent)  (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 404 for non-existent projectId\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.data.fields.projectId).to.eql(\"ProjectId not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"projectId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change projectId (null) (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for projectId null\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.projectId).to.eql(\"This field is required\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"projectId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change reporterId (null)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for reporterId null\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"This field is required\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"reporterId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue type - not allowed value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid issue type value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.type).to.eql(\"Must be one of: task, bug, story\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"type\": \"test_type\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change assignees - invalid ID (bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid assignee ID\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.users).to.eql(\"Invalid or non-existent user ID provided for assignees.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"users\": [\r\n        {\r\n            \"id\": 9999999\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue priority - not allowed value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid priority value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.priority).to.eql(\"Must be one of: 5, 4, 3, 2, 1\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"priority\": \"8\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_change\");\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating status\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that status was updated correctly\", function () {\r",
									"    pm.expect(jsonData.issue.id).to.eql(issueId);\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"inprogress\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue status - not allowed value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 400 for invalid status value\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"BAD_USER_INPUT\")\r",
									"    pm.expect(jsonData.error.data.fields.status).to.eql(\"Must be one of: backlog, selected, inprogress, done\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"test_status\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change: remove description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var issueId = pm.globals.get(\"issue_id_change\");\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating description\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.id).to.eql(issueId);\r",
									"    pm.expect(jsonData.issue.description).to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue - no parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating description\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change issue - no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct error code is returned\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INVALID_TOKEN\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"1\",\r\n    \"status\": \"done\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update non-existing issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Updating non-existing issue, response code should be 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"ENTITY_NOT_FOUND\")\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Issue not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{user_id1}},\r\n    \"priority\": \"1\",\r\n    \"status\": \"done\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{non_existing_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{non_existing_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update non-existing issue - issue_id > 10 digits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response should be 500 for non-existing ID exceeding maximum Integer value\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"    //pm.expect(jsonData.error.data.fields.reporterId).to.eql(\"Non-existing ID exceeds the maximum allowed integer value\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"\r",
									"pm.test(\"Environment variable 'description' was set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{user_id3}},\r\n    \"priority\": \"4\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{non_existing_id_>10_digits}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{non_existing_id_>10_digits}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id_change\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    //pm.expect(jsonData.issue.title).to.eql(\"et illo quo\")\r",
									"    //pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    //pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    //pm.expect(jsonData.issue.reporterId).to.eql(953891);\r",
									"    //pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    //pm.expect(jsonData.issue.description).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id_change}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id_change}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update project",
			"item": [
				{
					"name": "Get project (get initial info)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"pm.globals.set(\"totalNumberOfUsers\", jsonData.project.users.length);\r",
									"pm.globals.set(\"totalNumberOfIssues\", jsonData.project.issues.length);\r",
									"pm.globals.set(\"createdAt\", jsonData.project.createdAt);\r",
									"pm.globals.set(\"updatedAt\", jsonData.project.updatedAt);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Information was correctly saved\", function () {\r",
									"    pm.expect(jsonData.project.id).to.eql(pm.globals.get(\"project_id\"));\r",
									"    pm.expect(jsonData.project.createdAt).to.eql(pm.globals.get(\"createdAt\"));\r",
									"    pm.expect(jsonData.project.updatedAt).eql(pm.globals.get(\"updatedAt\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Updating project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"singularity 1.3\",\r\n    \"url\": \"https://www.atlassian.com/software/jira_clone\",\r\n    \"category\": \"software\",\r\n    \"description\": \"Plan, track, and manage your agile and software development projects in Jira. Customize your workflow, collaborate, and release great software. Updated!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project (data is modified)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Information was correctly retireved\", function () {\r",
									"    pm.expect(jsonData.project.id).to.eql(pm.globals.get(\"project_id\"));\r",
									"    //number of users is the same\r",
									"    pm.expect(jsonData.project.users.length).to.eql(pm.globals.get(\"totalNumberOfUsers\"));\r",
									"    //similar validation for number of issues can be added\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: time spent",
			"item": [
				{
					"name": "Create new issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.equal(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.equal(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    \r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"    \r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id2\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"inprogress\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"time_spent\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - add time spent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully adding time spent\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(8);\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - add time remaining",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully adding time remaining\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(4);\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time spent (value 0)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time spent, value 0\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(0);\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time spent (value null)    BETTER TO USE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time spent, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time remaining (value 0)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time remaining, value 0\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(0);\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time remaining (value null) BETTER TO USE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time remaining, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time spent - add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time spent\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": 9999999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time remaining - add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time remaining\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": 9999999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    //pm.expect(jsonData.issue.timeSpent).to.eql(8);\r",
									"    //pm.expect(jsonData.issue.timeSpent).to.eql(0);\r",
									"    //pm.expect(jsonData.issue.timeRemaining).to.eql(4);\r",
									"    //pm.expect(jsonData.issue.timeRemaining).to.eql(0);\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: estimate (using issue created in time spent folder)",
			"item": [
				{
					"name": "Get created issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - add time estimation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully adding estimate\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(6);\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove estimation (value 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating estimate, value 0\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(0);\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove estimation (value null) BETTER TO USE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating estimate, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - estimation maximum hours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time estimate\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": 9999999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    //pm.expect(jsonData.issue.estimate).to.eql(6);\r",
									"    //pm.expect(jsonData.issue.estimate).to.eql(0);\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: time spent - using random values",
			"item": [
				{
					"name": "Create new issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"const randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.eql(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.eql(randomTitle);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(randomTitle);\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(randomDescription);\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    \r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"    \r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id2\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"    \r",
									"    let createdAtTimestamp = new Date(jsonData.issue.createdAt).getTime();\r",
									"    let updatedAtTimestamp = new Date(jsonData.issue.updatedAt).getTime();\r",
									"    let currentTime = new Date().getTime();\r",
									"\r",
									"    pm.expect(createdAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"    pm.expect(updatedAtTimestamp).to.be.closeTo(currentTime, 2000);\r",
									"\r",
									"    pm.expect(jsonData.issue.listPosition).to.exist;\r",
									"    pm.expect(jsonData.issue.listPosition).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"selected\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"time_spent_randomValues\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{time_spent_randomValues}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{time_spent_randomValues}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - add time spent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var minTimeSpent = 4;\r",
									"var maxTimeSpent = 12;\r",
									"\r",
									"var randomTimeSpentValue = Math.floor(Math.random() * (maxTimeSpent - minTimeSpent + 1)) + minTimeSpent;\r",
									"\r",
									"pm.globals.set(\"timeSpent\", randomTimeSpentValue);\r",
									"\r",
									"console.log(\"Generated random timeSpent value: \" + randomTimeSpentValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var expectedTimeSpentValue = pm.globals.get(\"timeSpent\")\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully adding time spent\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(parseInt(expectedTimeSpentValue));\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": {{timeSpent}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - add time remaining",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomTimeSpentValue = pm.globals.get(\"timeSpent\");\r",
									"var minTimeRemaining = 2;\r",
									"\r",
									"if (randomTimeSpentValue) {\r",
									"    console.log(\"Using randomTimeSpentValue from previous request: \" + randomTimeSpentValue);\r",
									"    \r",
									"    var maxTimeRemaining = Math.max(minTimeRemaining, randomTimeSpentValue - 2);\r",
									"\r",
									"    var randomTimeRemainingValue = Math.floor(Math.random() * (maxTimeRemaining - minTimeRemaining + 1)) + minTimeRemaining;\r",
									"\r",
									"    pm.globals.set(\"timeRemaining\", randomTimeRemainingValue);\r",
									"\r",
									"    console.log(\"Generated random timeRemaining value: \" + randomTimeRemainingValue);\r",
									"} else {\r",
									"    var maxTimeRemaining = 8;\r",
									"\r",
									"    var randomTimeRemainingValue = Math.floor(Math.random() * (maxTimeRemaining - minTimeRemaining + 1)) + minTimeRemaining;\r",
									"\r",
									"    pm.globals.set(\"timeRemaining\", randomTimeRemainingValue);\r",
									"    \r",
									"    console.log(\"Generated fallback timeRemaining value: \" + randomTimeRemainingValue);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var expectedTimeRemainingValue = pm.globals.get(\"timeRemaining\")\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully adding time remaining\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(parseInt(expectedTimeRemainingValue));\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": {{timeRemaining}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time spent (value null)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time spent, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time remaining (value null)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time remaining, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time spent - add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var maxTimeSpentValue = 9999999999;\r",
									"\r",
									"pm.globals.set(\"timeSpent\", maxTimeSpentValue);\r",
									"\r",
									"console.log(\"Set max timeSpent value: \" + maxTimeSpentValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time spent\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": {{timeSpent}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time remaining - add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var maxTimeRemainingValue = 9999999999;\r",
									"\r",
									"pm.globals.set(\"timeRemaining\", maxTimeRemainingValue);\r",
									"\r",
									"console.log(\"Set max timeRemaining value: \" + maxTimeRemainingValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time remaining\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": {{timeRemaining}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated issue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var expectedTimeSpentValue = pm.globals.get(\"timeSpent\")\r",
									"var expectedTimeRemainingValue = pm.globals.get(\"timeRemaining\")\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    //pm.expect(jsonData.issue.timeSpent).to.eql(expectedTimeSpentValue);\r",
									"    //pm.expect(jsonData.issue.timeRemaining).to.eql(expectedTimeRemainingValue);\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: estimate - using random values (using issue created in time spent - using random values folder)",
			"item": [
				{
					"name": "Get created issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - add time estimation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTimeEstimateValue = pm.globals.get(\"estimate\")\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully adding time estimate\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(parseInt(randomTimeEstimateValue));\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var minTimeEstimate = 2;\r",
									"var maxTimeEstimate = 12;\r",
									"\r",
									"var randomTimeEstimateValue = Math.floor(Math.random() * (maxTimeEstimate - minTimeEstimate + 1)) + minTimeEstimate;\r",
									"\r",
									"pm.globals.set(\"estimate\", randomTimeEstimateValue);\r",
									"\r",
									"console.log(\"Generated random estimate value: \" + randomTimeEstimateValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": {{estimate}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove estimation (value null) BETTER TO USE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating estimate, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - estimate maximum hours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for estimate\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var maxTimeEstimateValue = 9999999999;\r",
									"\r",
									"pm.globals.set(\"estimate\", maxTimeEstimateValue);\r",
									"\r",
									"console.log(\"Set max estimate value: \" + maxTimeEstimateValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": {{estimate}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get updated issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTimeEstimateValue = pm.globals.get(\"estimate\")\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    //pm.expect(jsonData.issue.estimate).to.eql(parseInt(randomTimeEstimateValue));\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: time spent - complex",
			"item": [
				{
					"name": "Create new issue (POST + PUT) - time spent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"var randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"function getRandomTimeSpent(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"var randomTimeSpentValue = getRandomTimeSpent(4, 16);\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"pm.globals.set(\"timeSpent\", randomTimeSpentValue)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.eql(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.eql(randomTitle);\r",
									"    pm.expect(pm.globals.get(\"timeSpent\")).to.eql(randomTimeSpentValue)\r",
									"});\r",
									"\r",
									"console.log(\"Generated random timeSpent value: \" + randomTimeSpentValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"var randomTimeSpentValue = pm.globals.get(\"timeSpent\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"base_url\") + '/issues/' + pm.globals.get(\"issue_id\"),\r",
									"    method: 'PUT',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.globals.get('token') \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\"timeSpent\": parseInt(randomTimeSpentValue)})\r",
									"    }\r",
									"}, function (error, response) {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    } else {\r",
									"        var updatedJsonData = response.json();\r",
									"        console.log(\"Updated issue data: \", updatedJsonData);\r",
									"\r",
									"        pm.test(\"Check that timeSpent was updated correctly\", function () {\r",
									"            pm.expect(updatedJsonData.issue.timeSpent).to.eql(parseInt(randomTimeSpentValue));\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check that information was saved correctly after update\", function () {\r",
									"            pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"            pm.expect(jsonData.issue.priority).to.eql(\"4\");\r",
									"            pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"\r",
									"            pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"            pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"            pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id1\"));\r",
									"\r",
									"            pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"            pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"            pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"bug\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"4\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"timeSpent\": null,\r\n    \"timeRemaining\": null,\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - time spent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTimeSpentValue = pm.globals.get(\"timeSpent\");\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"4\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    //pm.expect(jsonData.issue.timeSpent).to.eql(parseInt(randomTimeSpentValue));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time spent (value null)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time spent, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"bug\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"4\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time spent - add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var maxTimeSpentValue = 9999999999;\r",
									"\r",
									"pm.globals.set(\"timeSpent\", maxTimeSpentValue);\r",
									"\r",
									"console.log(\"Set max timeSpent value: \" + maxTimeSpentValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time spent\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": {{timeSpent}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new issue (POST + PUT) - time remaining",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"var randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"var randomTimeSpentValue = pm.globals.get(\"timeSpent\");\r",
									"var minTimeRemaining = 2;\r",
									"\r",
									"if (randomTimeSpentValue) {\r",
									"    console.log(\"Using randomTimeSpentValue from previous request: \" + randomTimeSpentValue);\r",
									"    \r",
									"    var maxTimeRemaining = Math.max(minTimeRemaining, randomTimeSpentValue - 2);\r",
									"\r",
									"    var randomTimeRemainingValue = Math.floor(Math.random() * (maxTimeRemaining - minTimeRemaining + 1)) + minTimeRemaining;\r",
									"\r",
									"    pm.globals.set(\"timeRemaining\", randomTimeRemainingValue);\r",
									"\r",
									"    console.log(\"Generated random timeRemaining value: \" + randomTimeRemainingValue);\r",
									"} else {\r",
									"    var maxTimeRemaining = 8;\r",
									"\r",
									"    var randomTimeRemainingValue = Math.floor(Math.random() * (maxTimeRemaining - minTimeRemaining + 1)) + minTimeRemaining;\r",
									"\r",
									"    pm.globals.set(\"timeRemaining\", randomTimeRemainingValue);\r",
									"    \r",
									"    console.log(\"Generated fallback timeRemaining value: \" + randomTimeRemainingValue);\r",
									"}\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.eql(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.eql(randomTitle);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"var randomTimeRemainingValue = pm.globals.get(\"timeRemaining\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"     url: pm.collectionVariables.get(\"base_url\") + '/issues/' + pm.globals.get(\"issue_id\"),\r",
									"    method: 'PUT',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.globals.get('token') \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\"timeRemaining\": parseInt(randomTimeRemainingValue)})\r",
									"    }\r",
									"}, function (error, response) {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    } else {\r",
									"        var updatedJsonData = response.json();\r",
									"        console.log(\"Updated issue data: \", updatedJsonData);\r",
									"\r",
									"        pm.test(\"Check that timeRemaining was updated correctly\", function () {\r",
									"            pm.expect(updatedJsonData.issue.timeRemaining).to.eql(parseInt(randomTimeRemainingValue));\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check that information was saved correctly after update\", function () {\r",
									"            pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"            pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"            pm.expect(jsonData.issue.status).to.eql(\"done\");\r",
									"\r",
									"            pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"            pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"            pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id2\"));\r",
									"\r",
									"            pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"            pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"            pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"2\",\r\n    \"status\": \"done\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ],\r\n    \"timeSpent\": null,\r\n    \"timeRemaining\": null,\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - time remaining",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTimeRemainingValue = pm.globals.get(\"timeRemaining\");\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"done\");\r",
									"    //pm.expect(jsonData.issue.timeRemaining).to.eql(parseInt(randomTimeRemainingValue));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time remaining (value null)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time remaining, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"2\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"done\");\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time remaining - add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var maxTimeRemainingValue = 9999999999;\r",
									"\r",
									"pm.globals.set(\"timeRemaining\", maxTimeRemainingValue);\r",
									"\r",
									"console.log(\"Set max timeRemaining value: \" + maxTimeRemainingValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time remaining\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeRemaining\": {{timeRemaining}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new issue (POST + PUT) - time tracking (spent, remaining)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"var randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"var minTimeSpent = 2;\r",
									"var maxTimeSpent = 18;\r",
									"var minTimeRemaining = 2;\r",
									"\r",
									"function getRandomValue(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"var randomTimeSpentValue = getRandomValue(minTimeSpent, maxTimeSpent);\r",
									"\r",
									"var maxTimeRemaining = Math.max(minTimeRemaining, randomTimeSpentValue - 2);\r",
									"var randomTimeRemainingValue = getRandomValue(minTimeRemaining, maxTimeRemaining);\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"pm.globals.set(\"timeSpent\", randomTimeSpentValue)\r",
									"pm.globals.set(\"timeRemaining\", randomTimeRemainingValue)\r",
									"\r",
									"console.log(\"Generated random timeSpent value: \" + randomTimeSpentValue);\r",
									"console.log(\"Generated random timeRemaining value: \" + randomTimeRemainingValue);\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.eql(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.eql(randomTitle);\r",
									"    pm.expect(pm.globals.get(\"timeSpent\")).to.eql(randomTimeSpentValue);\r",
									"    pm.expect(pm.globals.get(\"timeRemaining\")).to.eql(randomTimeRemainingValue);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"var randomTimeSpentValue = pm.globals.get(\"timeSpent\");\r",
									"var randomTimeRemainingValue = pm.globals.get(\"timeRemaining\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"     url: pm.collectionVariables.get(\"base_url\") + '/issues/' + pm.globals.get(\"issue_id\"),\r",
									"    method: 'PUT',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.globals.get('token') \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\"timeSpent\": parseInt(randomTimeSpentValue), \"timeRemaining\": parseInt(randomTimeRemainingValue)})\r",
									"    }\r",
									"}, function (error, response) {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    } else {\r",
									"        var updatedJsonData = response.json();\r",
									"        console.log(\"Updated issue data: \", updatedJsonData);\r",
									"\r",
									"        pm.test(\"Check that timeSpent and timeRemaining were updated correctly\", function () {\r",
									"            pm.expect(updatedJsonData.issue.timeSpent).to.eql(parseInt(randomTimeSpentValue));\r",
									"            pm.expect(updatedJsonData.issue.timeRemaining).to.eql(parseInt(randomTimeRemainingValue));\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check that information was saved correctly after update\", function () {\r",
									"            pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"            pm.expect(jsonData.issue.priority).to.eql(\"1\");\r",
									"            pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"\r",
									"            pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"            pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"            pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id2\"));\r",
									"\r",
									"            pm.expect(jsonData.issue.estimate).to.be.null;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"            pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"story\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"1\",\r\n    \"status\": \"inprogress\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id2}}\r\n        }\r\n    ],\r\n    \"timeSpent\": null,\r\n    \"timeRemaining\": null,\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - time tracking (spent, remaining)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTimeSpentValue = pm.globals.get(\"timeSpent\");\r",
									"var randomTimeRemainingValue = pm.globals.get(\"timeRemaining\");\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"1\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.eql(parseInt(randomTimeSpentValue));\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.eql(parseInt(randomTimeRemainingValue));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove time spent & remaining (value null)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating time spent & time remaining, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"story\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"1\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"inprogress\");\r",
									"    pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"    pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": null,\r\n    \"timeRemaining\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - time spent & remaining -  add maximum hours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var maxTimeSpentValue = 9999999999;\r",
									"var maxTimeRemainingValue = 9999999999;\r",
									"\r",
									"pm.globals.set(\"timeSpent\", maxTimeSpentValue);\r",
									"pm.globals.set(\"timeRemaining\", maxTimeRemainingValue);\r",
									"\r",
									"console.log(\"Set max timeSpent value: \" + maxTimeSpentValue);\r",
									"console.log(\"Set max timeRemaining value: \" + maxTimeRemainingValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time remaining\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timeSpent\": {{timeSpent}},\r\n    \"timeRemaining\": {{timeRemaining}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Time tracking: estimate - complex",
			"item": [
				{
					"name": "Create new issue (POST + PUT) - estimate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomDescription = pm.globals.get(\"description\");\r",
									"var randomTitle = pm.globals.get(\"title\");\r",
									"var randomTimeEstimateValue = pm.globals.get(\"estimate\");\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"     url: pm.collectionVariables.get(\"base_url\") + '/issues/' + pm.globals.get(\"issue_id\"),\r",
									"    method: 'PUT',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.globals.get('token') \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\"estimate\": parseInt(randomTimeEstimateValue)})\r",
									"    }\r",
									"}, function (error, response) {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    } else {\r",
									"        var updatedJsonData = response.json();\r",
									"        console.log(\"Updated issue data: \", updatedJsonData);\r",
									"\r",
									"        pm.test(\"Check that estimate was updated correctly\", function () {\r",
									"            pm.expect(updatedJsonData.issue.estimate).to.eql(parseInt(randomTimeEstimateValue));\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check that information was saved correctly after update\", function () {\r",
									"            pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"            pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"            pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"\r",
									"            pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"            pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"            pm.expect(jsonData.issue.users[0].id).to.eql(pm.globals.get(\"user_id1\"));\r",
									"\r",
									"            pm.expect(jsonData.issue.timeSpent).to.be.null;\r",
									"            pm.expect(jsonData.issue.timeRemaining).to.be.null;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"            pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"\r",
									"            pm.expect(jsonData.issue.createdAt).to.eql(jsonData.issue.updatedAt);\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomDescription = pm.variables.replaceIn(\"{{$randomLoremSentences}}\");\r",
									"var randomTitle = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
									"\r",
									"var minTimeEstimate = 2;\r",
									"var maxTimeEstimate = 10;\r",
									"\r",
									"var randomTimeEstimateValue = Math.floor(Math.random() * (maxTimeEstimate - minTimeEstimate + 1)) + minTimeEstimate;\r",
									"\r",
									"pm.globals.set(\"estimate\", randomTimeEstimateValue);\r",
									"\r",
									"console.log(\"Generated random estimate value: \" + randomTimeEstimateValue);\r",
									"\r",
									"pm.globals.set(\"description\", randomDescription)\r",
									"pm.globals.set(\"title\", randomTitle)\r",
									"\r",
									"pm.test(\"Environment variables were set correctly\", function () {\r",
									"    pm.expect(pm.globals.get(\"description\")).to.eql(randomDescription);\r",
									"    pm.expect(pm.globals.get(\"title\")).to.eql(randomTitle);\r",
									"    pm.expect(pm.globals.get(\"estimate\")).to.eql(randomTimeEstimateValue)\r",
									"});\r",
									"\r",
									"console.log(\"Generated random estimate value: \" + randomTimeEstimateValue);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"selected\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ],\r\n    \"timeSpent\": null,\r\n    \"timeRemaining\": null,\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - remove estimation (value null) BETTER TO USE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var expectedTimeSpentValue = pm.globals.get(\"timeSpent\")\r",
									"var expectedTimeRemainingValue = pm.globals.get(\"timeRemaining\")\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 200 for successfully updating estimate, value null\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    pm.expect(jsonData.issue.estimate).to.be.null\r",
									"    pm.expect(jsonData.issue.createdAt).to.exist;\r",
									"    pm.expect(jsonData.issue.createdAt).to.not.be.null;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.exist;\r",
									"    pm.expect(jsonData.issue.updatedAt).to.not.be.null;\r",
									"\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.eql(jsonData.issue.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update issue - estimate maximum hours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Response should be 500 for exceeding maximum hours for time estimate\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"    pm.expect(jsonData.error.code).to.eql(\"INTERNAL_ERROR\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"estimate\": 9999999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue - estimate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var randomTimeEstimateValue = pm.globals.get(\"estimate\");\r",
									"\r",
									"//retrieve globals variables\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"selected\");\r",
									"    //pm.expect(jsonData.issue.estimate).to.eql(parseInt(randomTimeEstimateValue));\r",
									"});\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		}
	]
}